Library = { SOI ~ Item* ~ EOI }

Item = { FunctionDef }

FunctionDef = {
    "fn" ~ identifier ~ ParamList ~ Type? ~ Block
}

Block = {
    "{" ~ StatementList ~ "}"
}

StatementList = {
    Statement ~ (";" ~ Statement)* ~ LastSemi?
}

LastSemi = { ";" }

Statement = {
    VariableDecl
  | Assignment
  | ForInStmt
  | BreakStmt
  | ContinueStmt
  | ReturnStmt
  | Expression
}

IfExpr = {
    "if" ~ Expression ~ Block ~ ("else" ~ Block)?
}

BreakStmt    = { "break" }
ContinueStmt = { "continue" }
ReturnStmt   = { "return" ~ Expression? }

Assignment   = { LValue ~ "=" ~ Expression } 

VariableDecl = {
    "let" ~ VariableRef ~ Type ~ "=" ~ Expression
}

ForInStmt = {
    "for" ~ VariableRef ~ "in" ~ Expression ~ Block
}

LValue = {
    DerefExpr
}

Expression = {
    IfExpr
  | OrExpr
}

OrExpr = {
    AndExpr ~ ("or" ~ AndExpr)*
}

AndExpr = {
    ComparisonExpr ~ ("and" ~ ComparisonExpr)*
}

ComparisonExpr = {
    TermExpr ~ (ComparisonOperator ~ TermExpr)*
}

ComparisonOperator = _{
    EqEq
  | NotEq
  | LessThan
  | GreaterThan
  | LessThanEq
  | GreaterThanEq
}

TermExpr = {
    FactorExpr ~ (TermOperator ~ FactorExpr)*
}

TermOperator = _{
    Plus
  | Minus
}

FactorExpr = {
    RangeExpr ~ (FactorOperator ~ RangeExpr)*
}

FactorOperator = _{
    Asterisk
  | Slash
  | Percent
}

RangeExpr = {
    DerefExpr ~ (RangeOperator ~ DerefExpr)*
}

RangeOperator = _{
    DotDotLt
}

DerefExpr = {
    Asterisk* ~ CallExpr
}

CallExpr = {
    LeafExpr ~ ArgumentList*
}

ArgumentList = {
    ("(" ~ ")")
  | ("(" ~ Expression ~ ("," ~ Expression)* ~ ","? ~ ")")
}

LeafExpr = {
    NewExpr
  | VariableRef
  | LiteralExpr
  | GroupedExpr
}

NewExpr = {
    "new" ~ "(" ~ Type ~ ")"
}

LiteralExpr = {
    StringLiteral
  | IntegerLiteral
  | FloatLiteral
  | BooleanLiteral
  | UnitLiteral
}

VariableRef = {
    identifier
}

StringLiteral = @{
    "\"" ~ StringLiteralInner ~ "\""
}

StringLiteralInner = ${
  (!"\"" ~ ANY)*
}

IntegerLiteral = @{
    Minus? ~ ASCII_DIGIT+
}

FloatLiteral = @{
    ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT*
}

BooleanLiteral = {
    True
  | False
}

UnitLiteral = {
    "(" ~ ")"
}

GroupedExpr = { "(" ~ Expression ~ ")" }

ParamList = {
    ("(" ~ ")")
  | ("(" ~ ParamDecl ~ ("," ~ ParamDecl)* ~ ","? ~ ")")
}

ParamDecl = {
    identifier ~ Type
}

Type = {
    TypePrimitive
  | TypePointer
}

TypePrimitive = {
    TypeI32
  | TypeI64
  | TypeF64
  | TypeRange
  | TypeString
}

TypeI32     = { "i32" }
TypeI64     = { "i64" }
TypeF64     = { "f64" }
TypeRange   = { "range" }
TypeString  = { "str" }

TypePointer = { "&" ~ Type }

EqEq          = { "==" }
NotEq         = { "!=" }
LessThan      = { "<" }
GreaterThan   = { ">" }
LessThanEq    = { "<=" }
GreaterThanEq = { ">=" }
Asterisk      = { "*" }
DotDotLt      = { "..<" }
Slash         = { "/" }
Percent       = { "%" }
Plus          = { "+" }
Minus         = { "-" }
True          = { "true" }
False         = { "false" }

keyword    =  {
    "fn"
  | "let"
  | "new"
  | "for"
  | "in"
  | "if"
  | "else"
  | "or"
  | "and"
  | "break"
  | "continue"
  | "return"
  | True
  | False
}
identifier = @{ !keyword ~ (XID_START | "_") ~ (XID_CONTINUE | "_")* }
WHITESPACE = _{ " " | NEWLINE }
COMMENT    = _{ "#" ~ ANY* }
