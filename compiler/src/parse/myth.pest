Library = { SOI ~ Item* ~ EOI }

Item = { FunctionDef }

FunctionDef = {
  "fn"
  ~ identifier
  ~ ParamList
  ~ Type?
  ~ Block
}

Block = {
  "{" ~ StatementList ~ "}"
}

StatementList = {
  Statement ~ (";" ~ Statement)* ~ LastSemi?
}

LastSemi = { ";" }

Statement = {
  Assignment |
  ForInStmt |
  BreakStmt |
  ContinueStmt |
  ReturnStmt |
  Expression
}

IfExpr = {
  "if"
  ~ Expression
  ~ Block
  ~ (
    "else"
    ~ Block
  )?
}

BreakStmt = { "break" }
ContinueStmt = { "continue" }
ReturnStmt = { "return" ~ Expression? }

Assignment = {
  "let"
  ~ LValue
  ~ Type
  ~ "="
  ~ Expression
}

ForInStmt = {
  "for" ~ VariableRef ~ "in" ~ Expression ~ Block
}

LValue = {
  Expression
}

Expression = {
  IfExpr |
  OrExpr
}

OrExpr = {
  AndExpr
  ~ ("or" ~ AndExpr)*
}

AndExpr = {
  ComparisonExpr
  ~ ("and" ~ ComparisonExpr)*
}

ComparisonExpr = {
  TermExpr
  ~ (ComparisonOperator ~ TermExpr)*
}

ComparisonOperator = _{
  EqEq | NotEq | LessThan | GreaterThan | LessThanEq | GreaterThanEq
}

TermExpr = {
  FactorExpr
  ~ (TermOperator ~ FactorExpr)*
}

TermOperator = _{
  Plus | Minus
}

FactorExpr = {
  RangeExpr
  ~ (FactorOperator ~ RangeExpr)*
}

FactorOperator = _{
  Asterisk | Slash | Percent
}

RangeExpr = {
  CallExpr
  ~ (RangeOperator ~ CallExpr)*
}

RangeOperator = _{
  DotDotLt
}

CallExpr = {
  LeafExpr
  ~ ArgumentList*
}

ArgumentList = {
  ("(" ~ ")") |
  ("(" ~ Expression ~ ("," ~ Expression)* ~ ","? ~ ")")
}

LeafExpr = {
  VariableRef |
  LiteralExpr |
  GroupedExpr
}

LiteralExpr = {
  StringLiteral |
  IntegerLiteral |
  FloatLiteral |
  BooleanLiteral |
  UnitLiteral
}

VariableRef = {
  identifier
}

StringLiteral = @{
  "\"" ~ (!"\"" ~ ANY)* ~ "\""
}

IntegerLiteral = @{
  Minus? ~ ASCII_DIGIT+
}

FloatLiteral = @{
  ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT*
}

BooleanLiteral = {
  True | False
}

UnitLiteral = {
  "(" ~ ")"
}

GroupedExpr = { "(" ~ Expression ~ ")" }

ParamList = {
  ("(" ~ ")") |
  ("(" ~ ParamDecl ~ ("," ~ ParamDecl)* ~ ","? ~ ")")
}

ParamDecl = {
  identifier ~ Type
}

Type = {
  TypePrimitive
}

TypePrimitive = {
  TypeI32 | TypeI32 | TypeF64 | TypeRange
}

TypeI32 = { "i32" }
TypeI64 = { "i64" }
TypeF64 = { "f64" }
TypeRange = { "range" }

EqEq = { "==" }
NotEq = { "!=" }
LessThan = { "<" }
GreaterThan = { ">" }
LessThanEq = { "<=" }
GreaterThanEq = { ">=" }
Asterisk = { "*" }
DotDotLt = { "..<" }
Slash = { "/" }
Percent = { "%" }
Plus = { "+" }
Minus = { "-" }
True = { "true" }
False = { "false" }

keyword = {
  "fn" |
  "let" |
  "for" | "in" |
  "if" | "else" |
  "or" | "and" |
  "break" | "continue" | "return" |
  True | False
}
identifier = @{ !keyword ~ (XID_START | "_") ~ (XID_CONTINUE | "_")* }
WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ "#" ~ ANY* }
